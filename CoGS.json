{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Provides storage and execution of Computation Graphs.",
    "title": "Computation Graph Service (CoGS)",
    "termsOfService": "https://developer.autodesk.com/termsOfService",
    "contact": {
      "name": "Thunderstorm Operations",
      "email": "thunderstorm.dev@autodesk.com"
    },
    "version": "0.0.1"
  },
  "basePath": "/computation-graph/v1",
  "paths": {
    "/docs": {
      "x-ads-docs-skip": true,
      "get": {
        "description": "Dummy route",
        "operationId": "ignoredocs",
        "responses": {
          "200": {
            "description": "Dummy route"
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time."
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/execute": {
      "x-ads-docs-category": "execution",
      "x-ads-docs-weight": 150,
      "post": {
        "security": [
          {
            "access_code": [
              "data:read",
              "bucket:read"
            ]
          }
        ],
        "description": "Execute a `Graph` given its id.",
        "operationId": "execute",
        "parameters": [
          {
            "$ref": "#/parameters/backend"
          },
          {
            "$ref": "#/parameters/longTimeout"
          },
          {
            "description": "The parameters for execution of the `Graph`.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecuteParametersGraphID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Execution was successful.",
            "schema": {
              "$ref": "#/definitions/ExecuteResponse"
            }
          },
          "202": {
            "description": "The `Graph` is still being executed.",
            "schema": {
              "$ref": "#/definitions/ExecutePendingResponse"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to execute.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to execute.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "A `Graph` could not be found with the specified id.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "There was an error during execution.",
            "schema": {
              "type": "string"
            }
          },
          "504": {
            "description": "There was a timeout during execution.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/execute/designscript": {
      "x-ads-docs-category": "execution",
      "x-ads-docs-weight": 170,
      "post": {
        "security": [
          {
            "access_code": [
              "data:read"
            ]
          }
        ],
        "description": "Execute a `Graph` given a DesignScript program.",
        "operationId": "executeDesignScript",
        "parameters": [
          {
            "$ref": "#/parameters/header_x_user_id"
          },
          {
            "$ref": "#/parameters/backend"
          },
          {
            "$ref": "#/parameters/longTimeout"
          },
          {
            "description": "The parameters for execution of the DesignScript program.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecuteParametersDesignScript"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Execution was successful.",
            "schema": {
              "$ref": "#/definitions/ExecuteResponse"
            }
          },
          "202": {
            "description": "The `Graph` is still being executed.",
            "schema": {
              "$ref": "#/definitions/ExecutePendingResponse"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to execute.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to execute.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "There was an error during execution.",
            "schema": {
              "type": "string"
            }
          },
          "504": {
            "description": "There was a timeout during execution.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/execute/getinout": {
      "x-ads-docs-category": "support",
      "x-ads-docs-weight": 220,
      "post": {
        "security": [
          {
            "access_code": [
              ""
            ]
          }
        ],
        "description": "Takes an array of DesignScript programs and returns for each program an array of input variables and count of output ports. Input variables are ones that aren't defined in the program itself and need values from outside the program.",
        "operationId": "executeGetInOut",
        "parameters": [
          {
            "$ref": "#/parameters/header_x_user_id"
          },
          {
            "description": "The programs to parse.",
            "name": "programs",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The programs were parsed.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecuteGetInOutData"
              }
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the inputs for a program.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/execute/graph": {
      "x-ads-docs-category": "execution",
      "x-ads-docs-weight": 160,
      "post": {
        "security": [
          {
            "access_code": [
              "data:read"
            ]
          }
        ],
        "description": "Execute a `Graph` and its dependent `Graph`'s given their full definitions.",
        "operationId": "executeGraph",
        "parameters": [
          {
            "$ref": "#/parameters/header_x_user_id"
          },
          {
            "$ref": "#/parameters/backend"
          },
          {
            "$ref": "#/parameters/longTimeout"
          },
          {
            "description": "The parameters for execution of the `Graph`.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecuteParametersGraph"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Execution was successful.",
            "schema": {
              "$ref": "#/definitions/ExecuteResponse"
            }
          },
          "202": {
            "description": "The `Graph` is still being executed.",
            "schema": {
              "$ref": "#/definitions/ExecutePendingResponse"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to execute.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to execute.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "There was an error during execution.",
            "schema": {
              "type": "string"
            }
          },
          "504": {
            "description": "There was a timeout during execution.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/execute/library": {
      "x-ads-docs-category": "support",
      "x-ads-docs-weight": 200,
      "get": {
        "security": [
          {
            "access_code": [
              ""
            ]
          }
        ],
        "description": "Retrieves a list of what functionality is currently available in DesignScript execution.",
        "operationId": "executeLibrary",
        "parameters": [
          {
            "$ref": "#/parameters/header_x_user_id"
          },
          {
            "$ref": "#/parameters/backend"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Only return results if they've changed since the given timestamp.",
            "name": "IfModifiedSince",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The data was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ExecuteLibrary"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to retrieve the data.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/execute/result/{result_id}": {
      "x-ads-docs-category": "execution",
      "x-ads-docs-skip": true,
      "x-ads-docs-weight": 180,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read",
              "bucket:read"
            ]
          }
        ],
        "description": "Get an `ExecuteResult`, given an id.",
        "operationId": "resultGet",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the `ExecuteResult`.",
            "name": "result_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `ExecuteResult` was created successfully.",
            "schema": {
              "$ref": "#/definitions/ExecuteResult"
            }
          },
          "401": {
            "description": "You must be logged in to get an `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to get an `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "An `ExecuteResult` could not be found with the specified id.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "There was an error getting the `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      },
      "delete": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:write",
              "bucket:read"
            ]
          }
        ],
        "description": "Delete an `ExecuteResult`.",
        "operationId": "resultDelete",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the `ExecuteResult`.",
            "name": "result_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `ExecuteResult` was successfully deleted.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "You must be logged in to delete an `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to delete an `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No `ExecuteResult` could be found with the given id.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "There was an error deleting the `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      },
      "patch": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:write",
              "bucket:read"
            ]
          }
        ],
        "description": "Rename an `ExecuteResult` object.",
        "operationId": "resultPatch",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the `ExecuteResult` to rename.",
            "name": "result_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the `ExecuteResult`.",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `ExecuteResult` was successfully updated.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to update an `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to update an `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified `ExecuteResult` could not be found for updating.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "There was an error updating the specified `ExecuteResult`.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/designscript": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 110,
      "post": {
        "security": [
          {
            "access_code": [
              "data:read",
              "bucket:read"
            ]
          }
        ],
        "description": "Get a DesignScript program from the `Graph`.",
        "operationId": "graphToDesignScript",
        "parameters": [
          {
            "$ref": "#/parameters/header_x_user_id"
          },
          {
            "$ref": "#/parameters/backend"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DesignScriptParametersGraph"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The DesignScript program was created successfully.",
            "schema": {
              "$ref": "#/definitions/DesignScriptResponse"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to retrieve this `Graph` data.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to retrieve this `Graph` data.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to convert the `Graph` to DesignScript.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/list/hub/{hub_id}/project/{project_id}": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 50,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read"
            ]
          }
        ],
        "description": "Gets ids of `Graph`s from the given project that the current user can access.",
        "operationId": "graphListProjectGet",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "format": "Forge-DM Hub Id",
            "description": "The hub in which the project is located",
            "name": "hub_id",
            "in": "path",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "format": "Forge-DM Project Id",
            "description": "The project in which to search.",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` ids were retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "You must be logged in to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error getting `Graph`s with the given parameters.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/list/hub/{id}": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 40,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read"
            ]
          }
        ],
        "description": "Gets ids of `Graph`s from the given hub that the current user can access.",
        "operationId": "graphListHubGet",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "format": "Forge-DM Hub Id",
            "description": "The hub in which to search.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` ids were retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "You must be logged in to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error getting `Graph`s with the given parameters.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/list/private": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 30,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read"
            ]
          }
        ],
        "description": "Gets ids of private `Graph`s from the server that the current user can access.",
        "operationId": "graphListPrivateGet",
        "responses": {
          "200": {
            "description": "The `Graph` ids were retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "graphs"
              ],
              "properties": {
                "graphs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must be logged in to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error getting `Graph`s with the given parameters.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/list/project/{project_id}/folder/{folder_id}": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 60,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read"
            ]
          }
        ],
        "description": "Gets ids of `Graph`s from the given folder that the current user can access.",
        "operationId": "graphListFolderGet",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "format": "Forge-DM Project Id",
            "description": "The project in which the hub is located.",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "format": "Forge-DM Folder Id",
            "description": "The folder in which to search.",
            "name": "folder_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, then the search should be recursive.  Otherwise, only the selected folder is searched.",
            "name": "recursive",
            "in": "query",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` ids were retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "You must be logged in to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error getting `Graph`s with the given parameters.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/list/public": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 35,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:search"
            ]
          }
        ],
        "description": "Gets ids of public `Graph`s from the server.",
        "operationId": "graphListPublicGet",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "x-ads-docs-skip": true,
            "description": "Force the search API to ignore the cache so recent changes are reflected.",
            "name": "skipCache",
            "in": "query",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` ids were retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "graphs"
              ],
              "properties": {
                "graphs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "You must be logged in to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to list `Graph`s.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error getting `Graph`s with the given parameters.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/metadata": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 70,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read",
              "bucket:read"
            ]
          }
        ],
        "description": "Get metadata for one or more `Graph`s.",
        "operationId": "graphMetadataGet",
        "parameters": [
          {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ids of the `Graph`.",
            "name": "graph_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The data was retrieved successfully for one or more `Graph`s.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphMetadata"
              }
            }
          },
          "401": {
            "description": "You must be logged in to retrieve `Graph` data.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to retrieve `Graph` data.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "None of the `Graph` data could be retrieved.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphMetadata"
              }
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/public": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 10,
      "post": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:write",
              "data:create",
              "data:search",
              "bucket:read"
            ]
          }
        ],
        "description": "Publishes a new public `Graph` to the server.",
        "operationId": "graphPublicPost",
        "parameters": [
          {
            "$ref": "#/parameters/header_x_user_id"
          },
          {
            "description": "The `Graph` to create.",
            "name": "graph",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Graph"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` was created successfully, returns the Id.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to create a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to create a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the `Graph` with the given parameters",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/{graph_id}": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 80,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:search",
              "bucket:read"
            ]
          }
        ],
        "description": "Gets a `Graph`.",
        "operationId": "graphGet",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the `Graph`.",
            "name": "graph_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` was retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/Graph"
            }
          },
          "401": {
            "description": "You must be logged in to retrieve this `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to retrieve this `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "A `Graph` could not be found with the specified id.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      },
      "put": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:write",
              "data:search",
              "bucket:read"
            ]
          }
        ],
        "description": "Replaces an existing `Graph` with a new full definition.",
        "operationId": "graphPut",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the `Graph` to update.",
            "name": "graph_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The definition of the `Graph`.",
            "name": "graph",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Graph"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` was successfully updated.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to modify a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to modify a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "A `Graph` could not be found with the specified id.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error getting `Graph`s with the given parameters.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      },
      "delete": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:write",
              "bucket:read"
            ]
          }
        ],
        "description": "Deletes the given `Graph`.",
        "operationId": "graphDelete",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the `Graph` to delete.",
            "name": "graph_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` was deleted.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "You must be logged in to delete a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to delete a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "A `Graph` could not be found with the specified id.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      },
      "patch": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:write",
              "data:search"
            ]
          }
        ],
        "description": "Updates portions of an existing `Graph`.",
        "operationId": "graphPatch",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the `Graph` to update.",
            "name": "graph_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Changes to a `Graph` object in JSON Merge Patch format.",
            "name": "graph",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` was successfully updated.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to modify a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to modify a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "A `Graph` could not be found with the specified id.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error updating the `Graph` with the given parameters.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/{graph_id}/designscript": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 100,
      "post": {
        "security": [
          {
            "access_code": [
              "data:read",
              "bucket:read"
            ]
          }
        ],
        "description": "Get a DesignScript program from the `Graph`.",
        "operationId": "graphDesignScript",
        "parameters": [
          {
            "$ref": "#/parameters/backend"
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the `Graph`.",
            "name": "graph_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Parameters controlling the generation of the DesignScript program.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DesignScriptParametersGraphID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The DesignScript program was created successfully.",
            "schema": {
              "$ref": "#/definitions/DesignScriptResponse"
            }
          },
          "401": {
            "description": "You must be logged in to retrieve this `Graph` data.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to retrieve this `Graph` data.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "A `Graph` could not be found with the specified id.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to convert the `Graph` to DesignScript.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/{graph_id}/results": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-skip": true,
      "x-ads-docs-weight": 130,
      "get": {
        "security": [
          {
            "access_code": [
              "data:read"
            ]
          }
        ],
        "description": "Gets a list of `ExecuteResult`s for the specified `Graph` id.",
        "operationId": "graphResultsGet",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the associated Graph.",
            "name": "graph_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of `ExecuteResult` ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "You must be logged in to list `ExecuteResult`s.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to list `ExecuteResult`s.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified `Graph` id could not be found.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "There was an error retrieving `Designs` for the `Graph` id.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      },
      "delete": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:write",
              "bucket:read"
            ]
          }
        ],
        "description": "Deletes all `ExecuteResult`s for the specified `Graph` id.",
        "operationId": "graphResultsDelete",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "The id of the associated `Graph`.",
            "name": "graph_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The `Designs` were successfully deleted.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "You must be logged in to delete the `ExecuteResult`s.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to delete the `ExecuteResult`s.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No `Designs` could be found corresponding to the `Graph` id.",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "There was an error deleting the `ExecuteResult`s.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/graph/{project}/{folder}": {
      "x-ads-docs-category": "storage",
      "x-ads-docs-weight": 20,
      "post": {
        "security": [
          {
            "access_code": [
              "data:read",
              "data:write",
              "bucket:read"
            ]
          }
        ],
        "description": "Publishes a new `Graph` to the server.",
        "operationId": "graphPost",
        "parameters": [
          {
            "$ref": "#/parameters/header_x_user_id"
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "The Forge-DM Project in which to place the `Graph`.",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "The Forge-DM Folder in which to place the `Graph`.",
            "name": "folder",
            "in": "path",
            "required": true
          },
          {
            "description": "The `Graph` to create.",
            "name": "graph",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Graph"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Graph` was created successfully, returns the Id.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request. The request data was malformed.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "401": {
            "description": "You must be logged in to create a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "You do not have permission to create a `Graph`.",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request did not match the required schema.",
            "schema": {
              "$ref": "#/definitions/JsonError"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to create the `Graph` with the given parameters.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/health": {
      "x-ads-docs-skip": true,
      "get": {
        "description": "Returns \"healthy\" as the basic health of the service.",
        "produces": [
          "text/plain"
        ],
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/healthcheck": {
      "x-ads-docs-skip": true,
      "get": {
        "description": "Checks the health of the service and dependent services.",
        "operationId": "healthcheck",
        "parameters": [
          {
            "$ref": "#/parameters/header_x_user_id"
          },
          {
            "$ref": "#/parameters/backend"
          }
        ],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "schema": {
              "type": "string"
            }
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Service is not healthy",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    },
    "/swagger.json": {
      "x-ads-docs-skip": true,
      "get": {
        "description": "Dummy route",
        "operationId": "ignorespec",
        "responses": {
          "200": {
            "description": "Dummy route"
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time."
          }
        },
        "x-ads-apiproxy": {
          "postprocessing": [],
          "preprocessing": [],
          "target": "default-server"
        }
      }
    }
  },
  "definitions": {
    "Annotation": {
      "description": "A visual item that contains text, and may have associated `Node`s.",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "description": "The identifier of the `Annotation`. This must be unique within the graph.",
          "type": "string",
          "example": "12"
        },
        "Nodes": {
          "description": "Identifiers of the `Node`s that are part of this `Annotation`.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "example": [
            "10",
            "15"
          ]
        },
        "Title": {
          "description": "The text displayed by the `Annotation`.",
          "type": "string",
          "example": "Input Nodes"
        }
      },
      "additionalProperties": true,
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 160
    },
    "Binding": {
      "description": "Relates a `Node` to data in an associated data store.",
      "type": "object",
      "required": [
        "NodeId"
      ],
      "properties": {
        "NodeId": {
          "description": "The ID of the `Node`. This must exist in the graph.",
          "type": "string",
          "example": "17"
        }
      },
      "additionalProperties": {
        "description": "Key-Value pairs that connect to data in an associated data store. The key should identify the client that stored the data or the data store itself for a shared store, and the value should be some identifier to retrieve the associated data, or the data itself if it's small enough.",
        "type": "string"
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 120,
      "example": {
        "DynamoRevitData": "This is where Dynamo for Revit stores information",
        "NodeId": "17"
      }
    },
    "BooleanInputNode": {
      "description": "A `Node` that provides a boolean input value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "InputValue"
          ],
          "properties": {
            "InputValue": {
              "description": "The value of the input when the `Graph` was published.",
              "type": "boolean",
              "example": true
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Inputs",
        "Replication"
      ],
      "x-ads-docs-weight": 70
    },
    "BooleanOutputNode": {
      "description": "A `Node` that provides a boolean output value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "OutputValue"
          ],
          "properties": {
            "OutputValue": {
              "description": "The value of the output when the `Graph` was created.",
              "type": "boolean",
              "example": true
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Outputs",
        "Replication"
      ],
      "x-ads-docs-weight": 80
    },
    "Camera": {
      "description": "A named viewing orientation for looking at the model in 3D.",
      "type": "object",
      "required": [
        "EyeX",
        "EyeY",
        "EyeZ",
        "LookX",
        "LookY",
        "LookZ",
        "Name",
        "UpX",
        "UpY",
        "UpZ"
      ],
      "properties": {
        "EyeX": {
          "description": "X component of the eye position.",
          "type": "number",
          "format": "double",
          "default": -17,
          "example": 0
        },
        "EyeY": {
          "description": "Y component of the eye position.",
          "type": "number",
          "format": "double",
          "default": 24,
          "example": 100
        },
        "EyeZ": {
          "description": "Z component of the eye position.",
          "type": "number",
          "format": "double",
          "default": 50,
          "example": 0
        },
        "LookX": {
          "description": "X component of the camera target.",
          "type": "number",
          "format": "double",
          "default": 12,
          "example": 0
        },
        "LookY": {
          "description": "Y component of the camera target.",
          "type": "number",
          "format": "double",
          "default": -13,
          "example": 0
        },
        "LookZ": {
          "description": "Z component of the camera target.",
          "type": "number",
          "format": "double",
          "default": -58,
          "example": 0
        },
        "Name": {
          "description": "User visible name of the `Camera`.",
          "type": "string",
          "default": "Default Camera",
          "example": "Camera"
        },
        "UpX": {
          "description": "X component of the camera up vector.",
          "type": "number",
          "format": "double",
          "default": 0,
          "example": 0
        },
        "UpY": {
          "description": "Y component of the camera up vector.",
          "type": "number",
          "format": "double",
          "default": 1,
          "example": 0
        },
        "UpZ": {
          "description": "Z component of the camera up vector.",
          "type": "number",
          "format": "double",
          "default": 0,
          "example": 1
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 150
    },
    "CodeBlockNode": {
      "description": "A `Node` containing DesignScript code to be executed.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "Code"
          ],
          "properties": {
            "Code": {
              "description": "Code executed by the Node.",
              "type": "string",
              "example": "a=x;"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 90
    },
    "Color": {
      "description": "A value of a color in RGBA space.",
      "required": [
        "R",
        "G",
        "B",
        "A"
      ],
      "properties": {
        "A": {
          "description": "Alpha channel",
          "type": "integer",
          "maximum": 255,
          "minimum": 0,
          "example": 233
        },
        "B": {
          "description": "Blue channel",
          "type": "integer",
          "maximum": 255,
          "minimum": 0,
          "example": 191
        },
        "G": {
          "description": "Green channel",
          "type": "integer",
          "maximum": 255,
          "minimum": 0,
          "example": 127
        },
        "R": {
          "description": "Red channel",
          "type": "integer",
          "maximum": 255,
          "minimum": 0,
          "example": 63
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 65
    },
    "ColorInputNode": {
      "description": "A `Node` that provides a color input value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "InputValue"
          ],
          "properties": {
            "InputValue": {
              "$ref": "#/definitions/Color"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Inputs",
        "Replication"
      ],
      "x-ads-docs-weight": 70
    },
    "Connector": {
      "description": "An object that connects an output `Port` on a `Node` to an input `Port` on a `Node`.",
      "type": "object",
      "required": [
        "End",
        "Id",
        "Start"
      ],
      "properties": {
        "End": {
          "description": "The Id of the port at the end of the `Connector`.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "e212f8"
        },
        "Id": {
          "description": "The Id of the `Connector`.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "e212d6"
        },
        "Start": {
          "description": "The Id of the port at the start of the `Connector`.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "e212e7"
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 110
    },
    "ConversionUnit": {
      "description": "The types of units accepted by `ConvertBetweenUnitsNode`.",
      "type": "string",
      "enum": [
        "Feet",
        "Inches",
        "Millimeters",
        "Centimeters",
        "Decimeters",
        "Meters",
        "SquareMeter",
        "SquareFoot",
        "SquareInch",
        "SquareCentimeter",
        "SquareMillimeter",
        "Acres",
        "Hectares",
        "CubicMeters",
        "CubicFoot",
        "CubicYards",
        "CubicInches",
        "CubicCentimeter",
        "CubicMillimeter",
        "Litres",
        "USGallons"
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 89
    },
    "ConvertBetweenUnitsNode": {
      "description": "A `Node` for converting values between different unit systems.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "MeasurementType",
            "FromConversion",
            "ToConversion"
          ],
          "properties": {
            "FromConversion": {
              "$ref": "#/definitions/ConversionUnit"
            },
            "MeasurementType": {
              "description": "The type of quantity being measured.",
              "type": "string",
              "enum": [
                "Length",
                "Area",
                "Volume"
              ],
              "example": "Length"
            },
            "ToConversion": {
              "$ref": "#/definitions/ConversionUnit"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 90
    },
    "DateTimeInputNode": {
      "description": "A `Node` that provides a date and time input value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "InputValue"
          ],
          "properties": {
            "InputValue": {
              "description": "The value of the input when the `Graph` was published.",
              "type": "string",
              "format": "date-time",
              "example": "2007-09-22T11:17:00-04:00"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Inputs",
        "Replication"
      ],
      "x-ads-docs-weight": 70
    },
    "DesignScriptParametersGraph": {
      "allOf": [
        {
          "$ref": "#/definitions/GraphicsOptions"
        },
        {
          "description": "Parameters for converting a provided `Graph` to a DesignScript program.",
          "required": [
            "Graph"
          ],
          "properties": {
            "ExcludedNodes": {
              "description": "The `Node`s to be excluded when generating DesignScript for the `Graph`.  All downstream `Node`s are automatically excluded as well.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-omitempty": true,
              "example": [
                "ba4b8155e4e04ee5a38ee417f0428b66"
              ]
            },
            "Graph": {
              "$ref": "#/definitions/Graph"
            },
            "Inputs": {
              "description": "Values to use for the input nodes when generating the DesignScript.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/InputOutputData"
              },
              "x-omitempty": true
            }
          }
        }
      ],
      "x-ads-docs-category": "codegen",
      "x-ads-docs-weight": 410
    },
    "DesignScriptParametersGraphID": {
      "allOf": [
        {
          "$ref": "#/definitions/GraphicsOptions"
        },
        {
          "description": "Parameters for converting a stored `Graph` to a DesignScript program.",
          "properties": {
            "ExcludedNodes": {
              "description": "The `Node`s to be excluded when generating the DesignScript for the `Graph`.  All downstream `Node`s are automatically excluded as well.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-omitempty": true,
              "example": [
                "ba4b8155e4e04ee5a38ee417f0428b66"
              ]
            },
            "Inputs": {
              "description": "Values to use for the input nodes when generating the DesignScript.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/InputOutputData"
              },
              "x-omitempty": true
            }
          }
        }
      ],
      "x-ads-docs-category": "codegen",
      "x-ads-docs-weight": 400
    },
    "DesignScriptResponse": {
      "description": "Contains the DesignScript and source map generated from a `Graph`.",
      "type": "object",
      "properties": {
        "DesignScript": {
          "description": "The DesignScript program generated from the `Graph`.",
          "type": "string",
          "example": "a=1;"
        },
        "Messages": {
          "description": "Messages related to the DesignScript generation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteMessage"
          },
          "x-omitempty": true,
          "example": [
            {
              "Category": "Code Generation",
              "Message": "Empty input port name for CodeBlockNode.",
              "Position": {
                "EndColumn": 152,
                "EndLine": 1,
                "StartColumn": 39,
                "StartLine": 1
              },
              "Source": "eb4d8a3454374064ad52db5c58a95451"
            }
          ]
        },
        "SourceMap": {
          "description": "Contains data to map lines within the program to the source `Node`, and to the line number within the `Node` for a `CodeBlockNode`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceMapEntry"
          },
          "x-omitempty": true
        }
      },
      "x-ads-docs-category": "codegen",
      "x-ads-docs-weight": 420
    },
    "ExecuteAlias": {
      "description": "Aliases for namespaces and function names. These are usually provided for compatibility reasons.",
      "type": "object",
      "properties": {
        "New": {
          "description": "The replacement name.",
          "type": "string",
          "example": "Autodesk.Thunderstorm.DesignScript.ToString"
        },
        "Old": {
          "description": "The original name.",
          "type": "string",
          "example": "DSCore.String.FromObject"
        }
      },
      "x-ads-docs-category": "library",
      "x-ads-docs-weight": 610
    },
    "ExecuteEnum": {
      "description": "An enum and its values.",
      "properties": {
        "Name": {
          "description": "The name of the enum.",
          "type": "string",
          "example": "Autodesk.Thunderstorm.DayOfWeek"
        },
        "Values": {
          "description": "The valid values for the enum.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteEnumValue"
          },
          "example": [
            {
              "Name": "Sunday"
            },
            {
              "Name": "Monday",
              "Value": 1
            },
            {
              "Name": "Tuesday",
              "Value": 2
            },
            {
              "Name": "Wednesday",
              "Value": 3
            },
            {
              "Name": "Thursday",
              "Value": 4
            },
            {
              "Name": "Friday",
              "Value": 5
            },
            {
              "Name": "Saturday",
              "Value": 6
            }
          ]
        }
      },
      "x-ads-docs-category": "library",
      "x-ads-docs-weight": 650
    },
    "ExecuteEnumValue": {
      "description": "An enum value.",
      "properties": {
        "Name": {
          "description": "The string name of the enum value.",
          "type": "string",
          "example": "Monday"
        },
        "Value": {
          "description": "The numerical value of the enum value.",
          "type": "integer",
          "example": 1
        }
      },
      "x-ads-docs-category": "library",
      "x-ads-docs-weight": 660
    },
    "ExecuteFunction": {
      "description": "A function that can be called by nodes or DesignScript code.",
      "properties": {
        "MetaDescription": {
          "description": "A description of what the function does.",
          "type": "string",
          "example": "GetItemAtIndex returns the item from `list` located at `index`."
        },
        "MetaKeywords": {
          "description": "Keywords related to the function.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ads-docs-no-example": true,
          "x-omitempty": true
        },
        "MetaReturns": {
          "description": "A description of what the function return.",
          "type": "string",
          "x-ads-docs-no-example": true
        },
        "Name": {
          "description": "The name of the function.",
          "type": "string",
          "example": "Autodesk.Thunderstorm.List.GetItemAtIndex"
        },
        "Req": {
          "description": "The request parameters for the function.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteValueData"
          },
          "example": [
            {
              "MetaDescription": "List to fetch an item from.",
              "Name": "list",
              "Type": "var[]..[]"
            },
            {
              "MetaDescription": "Index of the item to be fetched.",
              "Name": "index",
              "Type": "number"
            }
          ]
        },
        "Resp": {
          "description": "The response values for the function.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteValueData"
          },
          "example": [
            {
              "MetaDescription": "Item in the list at the given index.",
              "Name": "item",
              "Type": "var[]..[]"
            }
          ]
        }
      },
      "x-ads-docs-category": "library",
      "x-ads-docs-weight": 630
    },
    "ExecuteGetInOutData": {
      "description": "Data about the input and output values in a block of code, or an error string if parsing failed.",
      "type": "object",
      "properties": {
        "Error": {
          "description": "Information on any parse errors encountered with the code.",
          "type": "string",
          "example": "Some error description"
        },
        "Inputs": {
          "description": "Names of input variables in the code.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "example": [
            "list",
            "first",
            "rest"
          ]
        },
        "Outputs": {
          "description": "Names of the output variables for each line of code.  If the line of code has an output but no name, then \"*\" is used instead.",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-omitempty": true
          },
          "x-omitempty": true,
          "example": [
            [
              "a",
              "b"
            ],
            [
              "c"
            ]
          ]
        }
      },
      "x-ads-docs-category": "library",
      "x-ads-docs-weight": 670
    },
    "ExecuteLibrary": {
      "description": "Type information for use by nodes and DesignScript code.",
      "properties": {
        "Enums": {
          "description": "Enums that can be instantiated or returned by nodes or DesignScript code.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteEnum"
          },
          "x-omitempty": true
        },
        "FunctionAliases": {
          "description": "Function aliases remap function names to other function names in nodes or DesignScript code. These are usually provided for compatibility reasons.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteAlias"
          },
          "x-omitempty": true
        },
        "Functions": {
          "description": "Functions that can be called by nodes or DesignScript code.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteFunction"
          },
          "x-omitempty": true
        },
        "LastModified": {
          "description": "The timestamp of when the data last changed.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-02T19:01:14.271Z"
        },
        "NamespaceAliases": {
          "description": "Namespace aliases remap namespaces to other namespaces when used in nodes or DesignScript code. These are usually provided for compatibility reasons.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteAlias"
          },
          "x-omitempty": true
        },
        "Types": {
          "description": "Types that can be instantiated and returned by nodes or DesignScript code.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteType"
          },
          "x-omitempty": true
        }
      },
      "x-ads-docs-category": "library",
      "x-ads-docs-weight": 600
    },
    "ExecuteMessage": {
      "description": "A message (usually an error) generated by the execute call.",
      "type": "object",
      "required": [
        "Category",
        "Message"
      ],
      "properties": {
        "Category": {
          "description": "The category of the message.",
          "type": "string",
          "x-nullable": false,
          "example": "FunctionCallError"
        },
        "Message": {
          "description": "The text of the message.",
          "type": "string",
          "x-nullable": false,
          "example": "I received an error when calling \"Autodesk.Thunderstorm.String.Concat\" : One or more elements are not strings."
        },
        "Position": {
          "$ref": "#/definitions/ExecuteMessagePosition"
        },
        "Source": {
          "description": "Id of the node which generated the message, if any.",
          "type": "string",
          "x-nullable": true,
          "example": "eb4d8a3454374064ad52db5c58a95451"
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 280
    },
    "ExecuteMessagePosition": {
      "description": "The location of the code which generated an execute message.",
      "type": "object",
      "required": [
        "StartLine",
        "StartColumn",
        "EndLine",
        "EndColumn"
      ],
      "properties": {
        "EndColumn": {
          "description": "The column on the `EndLine` where the relevant code ends.",
          "type": "integer",
          "x-nullable": false,
          "example": 152
        },
        "EndLine": {
          "description": "The line on which the relevant code ends.",
          "type": "integer",
          "x-nullable": false,
          "example": 1
        },
        "StartColumn": {
          "description": "The column on the `StartLine` where the relevant code starts.",
          "type": "integer",
          "x-nullable": false,
          "example": 39
        },
        "StartLine": {
          "description": "The line on which the relevant code starts.",
          "type": "integer",
          "x-nullable": false,
          "example": 1
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 290
    },
    "ExecuteParameters": {
      "description": "Base type for all execution options.",
      "type": "object",
      "properties": {
        "ExcludedNodes": {
          "description": "The `Node`s to be excluded when executing the `Graph`. All downstream `Node`s are automatically excluded as well.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "example": [
            "15afcc64bb82424bac1ee50787212e57"
          ]
        },
        "Folder": {
          "description": "The Forge-DM folder in which to store the `ExecuteResult`.",
          "type": "string",
          "x-ads-docs-skip": true
        },
        "Graphics": {
          "$ref": "#/definitions/GraphicsOptions"
        },
        "IncludeOutputs": {
          "description": "If true, then the `ExecuteResult` will include the values of the Graph outputs.  These are found in the `Graph` definition for a `Graph` execution, or in the `GraphOutputs` parameter for DesignScript execution.",
          "type": "boolean",
          "example": true
        },
        "Name": {
          "description": "An optional name for the stored `ExecuteResult`.  This is used as the filename if the results are stored using Forge Data Management. If no value is provided in that case, then a name will be automatically generated using the `Graph` name.",
          "type": "string",
          "x-ads-docs-skip": true
        },
        "NotificationType": {
          "description": "How the caller wants to be notified about completed execution.",
          "type": "string",
          "enum": [
            "ForgeNotification",
            "ForgeCrossServiceEventing",
            "Webhook"
          ],
          "x-ads-docs-skip": true
        },
        "Project": {
          "description": "The Forge-DM project in which to store the `ExecuteResult`.",
          "type": "string",
          "x-ads-docs-skip": true
        },
        "ResultPolicy": {
          "description": "Controls which computation results are returned in the `NamedValues` field of the `ExecuteResult` object. For the value `AllVariables`, all DesignScript variables (excluding variables of type `Autodesk.Thunderstorm.Common.Graphics`) are returned. If this is used with `/execute` or `/execute/graph` for execution of a `Graph`, this includes any intermediate variables created by the DesignScript generation process. For the value `SpecificVariables`, the variables named in the array `SpecificItems` are returned, if they exist. Any non-existent names in the array are simply ignored. For the value `AllNodes`, the values of all `Node`s in the `Graph` are returned. For the value `SpecificNodes`, the `Node`s named in the array `SpecificItems` are returned, if they exist. Any non-existent nodes in the array are simply ignored. When the values `AllNodes` or `SpecificNodes` are used with `/execute/designscript` for executing DesignScript, the variables in the DesignScript must be named in the form `node___\u003cid\u003e` for nodes with a single output port, and the form `node_\u003cportname\u003e_\u003cid\u003e_\u003cindex\u003e` for nodes with multiple output ports.",
          "type": "string",
          "default": "None",
          "enum": [
            "None",
            "AllVariables",
            "SpecificVariables",
            "AllNodes",
            "SpecificNodes"
          ],
          "example": "SpecificNodes"
        },
        "ResultsType": {
          "description": "How the results should be returned to the user.  If the option is `Immediate` (the default), then the data is returned as the response to the call.  Otherwise, the data is stored for later retrieval, and an ID is returned with a 202 status in an object of type `ExecutePendingResponse`.  The data can be retrieved using the `/execute/result/{result_id}` route.  With `Immediate`, if the API timeout is going to expire, it will automatically switch to behave as in `TransientStorage`.  Any results stored using `TransientStorage` will be automatically deleted after 24 hours. For `ForgeDataManagement` using a `Graph` or a public `Graph` ID, then a `Project` and `Folder` in which to store the results must be provided. When using a private `Graph` ID, then they can be omitted, and the results will be stored in a subfolder under the folder of the `Graph`, with a name generated using the `Name` from the `ExecuteParameters` or the `Graph`.  The `Folder` and `Project` are also required where the user does not have write permission in the `Graph`'s folder.",
          "type": "string",
          "default": "Immediate",
          "enum": [
            "Immediate",
            "ForgeDataManagement",
            "TransientStorage"
          ],
          "x-ads-docs-skip": true
        },
        "SpecificItems": {
          "description": "Values to return when `ResultPolicy` is `SpecificVariables` or `SpecificNodes`.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "example": [
            "15afcc64bb82424bac1ee50787212e56"
          ]
        },
        "Webhook": {
          "description": "Webhook URL for `NotificationType` equal to `Webhook`.",
          "type": "string",
          "x-ads-docs-skip": true
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 200
    },
    "ExecuteParametersDesignScript": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteParameters"
        },
        {
          "description": "Execution of a DesignScript program.",
          "required": [
            "DesignScript"
          ],
          "properties": {
            "DesignScript": {
              "description": "The DesignScript program defining the `Graph` to execute.",
              "type": "string",
              "minLength": 1,
              "example": "x=1;"
            },
            "GraphOutputs": {
              "description": "The output data from the `Graph`, used to select what data to return when `IncludeOutputs` is true.  The values to be returned must be assigned to variables in the form `node_\u003cid\u003e`.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/OutputData"
              },
              "x-omitempty": true
            },
            "SourceMap": {
              "description": "Contains data to map lines within the program to the source node, and to the line number within the node for code block nodes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SourceMapEntry"
              },
              "x-omitempty": true
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 230
    },
    "ExecuteParametersGraph": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteParameters"
        },
        {
          "description": "Execution of a `Graph` and an optional array of dependent `Graph`s provided in the request.",
          "required": [
            "Graph"
          ],
          "properties": {
            "DependentGraphs": {
              "description": "The `Graph`s that are used as functions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Graph"
              },
              "x-omitempty": true
            },
            "Graph": {
              "$ref": "#/definitions/Graph"
            },
            "Inputs": {
              "description": "Values to use for the input nodes when executing the `Graph`.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/InputOutputData"
              },
              "x-omitempty": true
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 220
    },
    "ExecuteParametersGraphID": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteParameters"
        },
        {
          "description": "Execution of a stored `Graph`.",
          "required": [
            "GraphID"
          ],
          "properties": {
            "EnableIncremental": {
              "description": "If true, then the server will save data about this execution so that it may return incremental updates on future executions.  This is not a guarantee that incremental results will be returned as the saved state may be discarded before the next execution. If omitted or false, then this state is not saved.  (future work)",
              "type": "boolean",
              "x-ads-docs-no-example": true,
              "x-ads-docs-skip": true
            },
            "GraphID": {
              "description": "Id of the `Graph` to execute.",
              "type": "string",
              "example": "25afcc64bb82424bac1ee50787212e56"
            },
            "IncrementalToken": {
              "description": "Token returned by the server on a previous request made with `EnableIncremental` set to true.  This token is used to identify the previous state saved on the server.  This is not a guarantee that incremental results will be returned as the saved state may have been discarded. (future work)",
              "type": "string",
              "x-ads-docs-no-example": true,
              "x-ads-docs-skip": true
            },
            "Inputs": {
              "description": "Values to use for the input nodes when executing the `Graph`.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/InputOutputData"
              },
              "x-omitempty": true
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 210
    },
    "ExecutePendingResponse": {
      "description": "Data returned by the `/execute` routes for ongoing execution.",
      "type": "object",
      "properties": {
        "ResultHandle": {
          "description": "Handle to use to retrieve the results after execution completes.",
          "type": "string",
          "x-ads-docs-no-example": true
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 271
    },
    "ExecuteResponse": {
      "description": "Data returned by the `/execute` routes.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteResult"
        },
        {
          "type": "object",
          "properties": {
            "IncrementalToken": {
              "description": "When `EnableIncremental` in the request was true, contains the token to be provided on next call, to identify the previous state and allow only changed results to be returned from the next request. (future work)",
              "type": "string",
              "x-ads-docs-no-example": true
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 270
    },
    "ExecuteResult": {
      "description": "The data resulting from an execution of a `Graph`.",
      "type": "object",
      "properties": {
        "CreatedAt": {
          "description": "The timestamp of when the `Graph` execution was completed.",
          "type": "string",
          "format": "date-time",
          "x-ads-docs-skip": true
        },
        "CreatedBy": {
          "description": "The ID of the user who executed the `Graph`.",
          "type": "string",
          "x-ads-docs-skip": true
        },
        "DurationCodegen": {
          "description": "Elapsed time (in ms) to convert the `Graph` to DesignScript.",
          "type": "integer",
          "example": 12
        },
        "DurationExecution": {
          "description": "Elapsed time (in ms) to execute the DesignScript.",
          "type": "integer",
          "example": 25
        },
        "DurationGraph": {
          "description": "Elapsed time (in ms) to retrieve the `Graph` from storage.",
          "type": "integer",
          "example": 10
        },
        "DurationResults": {
          "description": "Total elapsed time (in ms) to extract the results from the atoms, non-contiguous, included in `DurationExecution`.",
          "type": "integer",
          "example": 17
        },
        "Geometry": {
          "description": "Geometry created if requested during execution.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RawGeometry"
          },
          "x-omitempty": true
        },
        "GraphID": {
          "description": "The ID of the `Graph` if created from a stored `Graph`.",
          "type": "string",
          "format": "Id for the `Graph`",
          "x-ads-docs-skip": true
        },
        "Inputs": {
          "description": "The values of the `Graph` inputs used for execution.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputOutputData"
          },
          "x-omitempty": true
        },
        "Messages": {
          "description": "Messages related to the execution.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteMessage"
          },
          "x-omitempty": true
        },
        "Name": {
          "description": "Optional name for the stored result set.",
          "type": "string",
          "x-ads-docs-skip": true
        },
        "NamedValues": {
          "description": "Values of nodes or variables if requested during execution.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedValue"
          },
          "x-omitempty": true
        },
        "Outputs": {
          "description": "Values of outputs if requested during execution.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputOutputData"
          },
          "x-omitempty": true
        },
        "Thumbnail": {
          "description": "Base-64 encoded thumbnail in PNG format if requested during execution.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true,
          "x-ads-docs-skip": true
        },
        "WSM": {
          "description": "Base-64 encoded WSM file.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true,
          "x-ads-docs-skip": true
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 265
    },
    "ExecuteType": {
      "description": "A type that can be instantiated or returned by nodes or DesignScript code.",
      "properties": {
        "ChecksumExtractor": {
          "description": "A function that computes the checksum for an object of this type.",
          "type": "string",
          "example": "Autodesk.Thunderstorm.Geometry.Geometry.Checksum"
        },
        "ChecksumValidator": {
          "description": "A function that compares two checksums created by the ChecksumExtractor function.",
          "type": "string",
          "example": "Autodesk.Thunderstorm.Geometry.Geometry.ChecksumsEqual__ss"
        },
        "Extends": {
          "description": "A list of types that this type extends.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "example": [
            "Autodesk.Thunderstorm.Geometry.Object_handle",
            "Autodesk.Thunderstorm.Geometry.Transformable_handle"
          ]
        },
        "Fields": {
          "description": "All the fields in this type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteValueData"
          },
          "x-omitempty": true,
          "example": [
            {
              "Name": "handle",
              "Type": "number"
            }
          ]
        },
        "Name": {
          "description": "The name of the type.",
          "type": "string",
          "example": "Autodesk.Thunderstorm.Geometry.Geometry_handle"
        }
      },
      "x-ads-docs-category": "library",
      "x-ads-docs-weight": 620
    },
    "ExecuteValue": {
      "description": "Base type for the value of a DesignScript variable or `Port` in a `Node`.",
      "type": "object",
      "required": [
        "ValueType"
      ],
      "properties": {
        "ValueType": {
          "description": "The type of the `ExecuteValue` object.",
          "type": "string",
          "example": "ExecuteValueString"
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 320,
      "discriminator": "ValueType"
    },
    "ExecuteValueBoolean": {
      "description": "Boolean value of a DesignScript variable or `Port`.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteValue"
        },
        {
          "required": [
            "Value"
          ],
          "properties": {
            "Value": {
              "description": "The value of the DesignScript variable or `Port`.",
              "type": "boolean",
              "example": true
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 340
    },
    "ExecuteValueColor": {
      "description": "Color value of a DesignScript variable or `Port`.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteValue"
        },
        {
          "required": [
            "Value"
          ],
          "properties": {
            "Value": {
              "$ref": "#/definitions/Color"
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 355
    },
    "ExecuteValueData": {
      "description": "A field of a type or function parameter.",
      "properties": {
        "MetaDefaultValue": {
          "description": "The value used if a function parameter is not provided, in string form.",
          "type": "string",
          "example": "1"
        },
        "MetaDescription": {
          "description": "A description of the field or parameter.",
          "type": "string",
          "example": "The number of repeats."
        },
        "Name": {
          "description": "The name of the field or parameter.",
          "type": "string",
          "example": "count"
        },
        "Type": {
          "description": "The type of the field or parameter.",
          "type": "string",
          "example": "int"
        }
      },
      "x-ads-docs-category": "library",
      "x-ads-docs-weight": 640
    },
    "ExecuteValueDateTime": {
      "description": "Date/Time value of a DesignScript variable or `Port`.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteValue"
        },
        {
          "required": [
            "Value"
          ],
          "properties": {
            "Value": {
              "description": "The value of the DesignScript variable or `Port`.",
              "type": "string",
              "format": "date-time",
              "example": "2007-09-22T11:17:00-04:00"
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 356
    },
    "ExecuteValueDuration": {
      "description": "Duration value of a DesignScript variable or `Port`.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteValue"
        },
        {
          "required": [
            "Value"
          ],
          "properties": {
            "Value": {
              "description": "The value of the DesignScript variable or `Port`.",
              "type": "integer",
              "example": 5000
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 357
    },
    "ExecuteValueNumber": {
      "description": "Numeric value of a DesignScript variable or `Port`.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteValue"
        },
        {
          "required": [
            "Value"
          ],
          "properties": {
            "Value": {
              "description": "The value of the DesignScript variable or `Port`.",
              "type": "number",
              "example": 42
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 330
    },
    "ExecuteValuePreview": {
      "description": "Value of a DesignScript variable or `Port` as a preview string.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteValue"
        },
        {
          "required": [
            "Value"
          ],
          "properties": {
            "Value": {
              "description": "The value of the DesignScript variable or `Port`.",
              "type": "string",
              "example": "Point(X = 1.000, Y = 1.000, Z = 1.000)"
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 360
    },
    "ExecuteValueString": {
      "description": "String value of a DesignScript variable or `Port`.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteValue"
        },
        {
          "required": [
            "Value"
          ],
          "properties": {
            "Value": {
              "description": "The value of the DesignScript variable or `Port`.",
              "type": "string",
              "example": "Dynamo"
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 350
    },
    "ExecuteValues": {
      "description": "Single `ExecuteValue` or array of `ExecuteValues` for a DesignScript variable or `Port`.",
      "type": "object",
      "properties": {
        "Array": {
          "description": "Array of `ExecuteValues` for a DesignScript variable or `Port`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecuteValues"
          },
          "x-omitempty": true
        },
        "Dict": {
          "description": "Dictionary of `ExecuteValues` for a DesignScript variable or `Port`.",
          "type": "object",
          "additionalProperties": {
            "x-nullable": true,
            "$ref": "#/definitions/ExecuteValues"
          },
          "x-omitempty": true
        },
        "Value": {
          "$ref": "#/definitions/ExecuteValue"
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 310,
      "example": {
        "Array": [
          {
            "Array": [
              {
                "Value": {
                  "Value": "Dynamo",
                  "ValueType": "ExecuteValueString"
                }
              }
            ]
          },
          {
            "Value": {
              "Value": true,
              "ValueType": "ExecuteValueBoolean"
            }
          }
        ]
      }
    },
    "ExtensionNode": {
      "description": "A client-specific node type other than the ones defined in this schema.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "type": "object",
          "required": [
            "ConcreteType"
          ],
          "properties": {
            "ConcreteType": {
              "description": "The concrete type of this node in the client.",
              "type": "string",
              "example": "CoreNodeModels.Watch"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 90
    },
    "FloatOutputNode": {
      "description": "A `Node` that provides a floating point output value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "OutputValue"
          ],
          "properties": {
            "OutputValue": {
              "description": "The value of the output when the `Graph` was created.",
              "type": "number",
              "example": 1.4142
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Outputs",
        "Replication"
      ],
      "x-ads-docs-weight": 80
    },
    "FormulaNode": {
      "description": "A `Node` that computes the value of a numerical formula.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "Formula"
          ],
          "properties": {
            "Formula": {
              "description": "Numerical formula executed by the `Node`.",
              "type": "string",
              "example": "x+y"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 90
    },
    "FunctionNode": {
      "description": "A `Node` that calls a function when it is executed.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "FunctionSignature"
          ],
          "properties": {
            "FunctionSignature": {
              "description": "Function to call when executing the `Node`.",
              "type": "string",
              "example": "Autodesk.DesignScript.Geometry.UV.ByCoordinates@double,double"
            },
            "FunctionType": {
              "type": "string",
              "default": "Standard",
              "enum": [
                "Standard",
                "VariableArgument",
                "Graph"
              ],
              "example": "VariableArgument"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 90
    },
    "Graph": {
      "description": "The top level data definition for a `Graph`.",
      "type": "object",
      "required": [
        "Uuid"
      ],
      "properties": {
        "Bindings": {
          "description": "Relates call sites in the graph to data in an associated data store.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Binding"
          },
          "x-omitempty": true
        },
        "Category": {
          "description": "General category of the `Graph`.",
          "type": "string",
          "example": "Sample"
        },
        "Connectors": {
          "description": "A list of `Connector`s in the `Graph`.  Not included when just requesting metadata.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Connector"
          },
          "x-omitempty": true
        },
        "Dependencies": {
          "description": "Ids of other `Graph`s used by this `Graph`.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "example": [
            "ba4b8155e4e04ee5a38ee417f0428b66"
          ]
        },
        "Description": {
          "description": "Description of the `Graph`.",
          "type": "string",
          "example": "Sample graph"
        },
        "Inputs": {
          "description": "Array of the `Graph` `InputData`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputData"
          },
          "x-omitempty": true
        },
        "Name": {
          "description": "Displayed name of the `Graph`.",
          "type": "string",
          "example": "Sample"
        },
        "Nodes": {
          "description": "A list of `Node`s in the `Graph`.  Not included when just requesting metadata.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          },
          "x-ads-docs-example-use-types": [
            "NumberInputNode",
            "IntegerOutputNode"
          ],
          "x-omitempty": true
        },
        "Outputs": {
          "description": "Array of the `Graph` `OutputData`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputData"
          },
          "x-omitempty": true
        },
        "Uuid": {
          "description": "The `Graph`'s UUID.",
          "type": "string",
          "format": "uuid",
          "example": "64fdebce-4925-43eb-80c5-40b851bb47c1"
        },
        "View": {
          "$ref": "#/definitions/View"
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 10
    },
    "GraphMetadata": {
      "description": "Data returned by the metadata route for one `Graph`.",
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Error": {
          "description": "Error message if unable to retrieve the `Graph`.",
          "type": "string"
        },
        "Graph": {
          "$ref": "#/definitions/Graph"
        },
        "Id": {
          "description": "The ID of the requested `Graph`",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 20
    },
    "GraphicsOptions": {
      "description": "Options for how to generate graphics data, and for which nodes.",
      "type": "object",
      "properties": {
        "Parameters": {
          "description": "The default graphics parameters, can be overridden on a node-by-node basis using `PerNodeParameters`.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "example": [
            "PARAMETERS"
          ]
        },
        "PerNodeParameters": {
          "description": "Overrides of the `Parameters` on a per-node basis.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeGraphicsParameters"
          },
          "x-omitempty": true
        },
        "ResultPolicy": {
          "description": "Controls which computation results are returned in the `Graphics` field of the `ExecuteResult` object. For the value `AllVariables`, all DesignScript variables of type `Autodesk.Thunderstorm.Common.Graphics` are returned. If this is used with `/execute` or `/execute/graph` for execution of a `Graph`, this includes any intermediate variables created by the DesignScript generation process. For the value `SpecificVariables`, the variables named in the array `SpecificItems` are returned, if they exist. Any non-existent names in the array are simply ignored. For the value `AllNodes`, the graphics of all `Node`s in the `Graph` that generate graphics are returned. For the value `SpecificNodes`, the `Node`s named in the array `SpecificItems` are returned, if they exist and generate graphics. Any non-existent nodes in the array are simply ignored. When the values `AllNodes` or `SpecificNodes` are used with `/execute/designscript` for executing DesignScript, the variables in the DesignScript must be named in the form `graphics_node___\u003cid\u003e`.",
          "type": "string",
          "default": "None",
          "enum": [
            "None",
            "AllVariables",
            "SpecificVariables",
            "AllNodes",
            "SpecificNodes"
          ],
          "example": "AllNodes"
        },
        "SpecificItems": {
          "description": "Items for which graphics are desired, used only when the `ResultPolicy` is `SpecificNodes` or `SpecificVariables`.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "example": [
            "15afcc64bb82424bac1ee50787212e56"
          ]
        },
        "ThumbnailHeight": {
          "description": "The desired pixel height of the thumbnail.",
          "type": "integer",
          "default": 288,
          "x-ads-docs-skip": true
        },
        "ThumbnailImageFormat": {
          "description": "The image format of the thumbnail, if desired.",
          "type": "string",
          "default": "none",
          "enum": [
            "none",
            "jpg",
            "png",
            "gif"
          ],
          "x-ads-docs-skip": true
        },
        "ThumbnailWidth": {
          "description": "The desired pixel width of the thumbnail.",
          "type": "integer",
          "default": 288,
          "x-ads-docs-skip": true
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 250
    },
    "InputData": {
      "description": "An input to the `Graph`.",
      "type": "object",
      "required": [
        "Id",
        "Name",
        "Type",
        "Value"
      ],
      "properties": {
        "Choices": {
          "description": "Values the user can select from for a selection type.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ads-docs-no-example": true,
          "x-omitempty": true
        },
        "Description": {
          "description": "Description displayed to the user.",
          "type": "string",
          "example": "Starting value."
        },
        "Id": {
          "description": "Unique identifier for the input",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "NumberInputNode1"
        },
        "MaximumValue": {
          "description": "Maximum value for a number type.",
          "type": "number",
          "x-nullable": true,
          "example": 100
        },
        "MinimumValue": {
          "description": "Minimum value for a number type.",
          "type": "number",
          "x-nullable": true,
          "example": 0
        },
        "Name": {
          "description": "Name displayed to the user.",
          "type": "string",
          "example": "Value"
        },
        "NumberType": {
          "description": "Whether to allow any value to be entered, or only integer values.  Applies only to `Type` of `number`.",
          "type": "string",
          "enum": [
            "Double",
            "Integer"
          ],
          "example": "Integer"
        },
        "StepValue": {
          "description": "Step size for a number type.",
          "type": "number",
          "x-nullable": true,
          "example": 5
        },
        "Type": {
          "description": "Type of the input",
          "type": "string",
          "enum": [
            "number",
            "boolean",
            "string",
            "selection",
            "color",
            "date"
          ],
          "example": "number"
        },
        "Value": {
          "description": "The value of the input when the `Graph` was published.",
          "type": "string",
          "format": "Based on type",
          "example": "10"
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 40
    },
    "InputNode": {
      "description": "An input to a nested `Graph`.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "Parameter"
          ],
          "properties": {
            "Parameter": {
              "$ref": "#/definitions/Parameter"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Inputs",
        "Replication"
      ],
      "x-ads-docs-weight": 85
    },
    "InputOutputData": {
      "description": "Provides the value of an `InputData` or `OutputData` object.",
      "type": "object",
      "required": [
        "Id",
        "Value"
      ],
      "properties": {
        "Id": {
          "description": "The Id of the `InputData` or `OutputData` object.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "15afcc64bb82424bac1ee50787212e56"
        },
        "Value": {
          "description": "The value of the object.",
          "type": "string",
          "format": "Depends on the type.",
          "example": "Dynamo"
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 240
    },
    "IntegerOutputNode": {
      "description": "A `Node` that provides an integer output value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "OutputValue"
          ],
          "properties": {
            "OutputValue": {
              "description": "The value of the output when the `Graph` was created.",
              "type": "integer",
              "example": 42
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Outputs",
        "Replication"
      ],
      "x-ads-docs-weight": 80
    },
    "JsonError": {
      "description": "Error indicating that a provided json parameter was either malformed or did not meet the required schema.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numeric error code",
          "type": "integer",
          "example": 624
        },
        "message": {
          "description": "Error string",
          "type": "string",
          "example": "Unable to parse the provided JSON"
        }
      },
      "x-ads-docs-category": "common",
      "x-ads-docs-weight": 1000
    },
    "NamedValue": {
      "description": "The values of a DesignScript variable or the `Port`s of an executed `Node`.",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteValues"
        },
        {
          "required": [
            "Name"
          ],
          "properties": {
            "Name": {
              "description": "Name of a DesignScript variable or Id of a `Node`.",
              "type": "string",
              "example": "15afcc64bb82424bac1ee50787212e56"
            }
          }
        }
      ],
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 300
    },
    "Node": {
      "description": "The base class for all `Node`s in the system.",
      "type": "object",
      "required": [
        "NodeType",
        "Id"
      ],
      "properties": {
        "Id": {
          "description": "The identifier of the `Node`. This must be unique within the graph.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "node1"
        },
        "Inputs": {
          "description": "The input `Port`s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-ads-docs-example-select": "Input",
          "x-omitempty": true
        },
        "NodeType": {
          "description": "The type of the `Node`.",
          "type": "string",
          "example": "ExtensionNode"
        },
        "Outputs": {
          "description": "The output `Port`s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-ads-docs-example-select": "Output",
          "x-omitempty": true
        },
        "Replication": {
          "type": "string",
          "enum": [
            "Disabled",
            "First",
            "Shortest",
            "Longest",
            "CrossProduct",
            "Auto"
          ],
          "example": "CrossProduct"
        },
        "VariableInputPorts": {
          "description": "This `Node`'s type has a variable number of input `Port`s.",
          "type": "boolean"
        }
      },
      "additionalProperties": true,
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "VariableInputPorts"
      ],
      "x-ads-docs-weight": 60,
      "discriminator": "NodeType"
    },
    "NodeGraphicsParameters": {
      "description": "Node-specific graphics formatting options, overrides the ones for the entire execution.",
      "type": "object",
      "required": [
        "Names",
        "Parameters"
      ],
      "properties": {
        "Names": {
          "description": "The IDs of the `Node`s for which different graphics parameters are desired.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "15afcc64-bb82-424b-ac1e-e50787212e56"
          ]
        },
        "Parameters": {
          "description": "Parameters to be passed to the graphics formatting operation.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "PARAMETERS"
          ]
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 260
    },
    "NodeView": {
      "description": "Information about the visual display of a `Node`.",
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Excluded": {
          "description": "If true, this `Node` and all downstream `Node`s are to be excluded from codegen and execution.  This is done by listing the `Node` IDs in the `ExcludedNodes` property.",
          "type": "boolean",
          "example": true
        },
        "Id": {
          "description": "Identifier of the `Node` for which this object applies.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "15"
        },
        "Name": {
          "description": "A user-defined name for the node",
          "type": "string",
          "example": "My favorite node"
        },
        "ShowGeometry": {
          "description": "User has specified that geometry from this node should be previewed.",
          "type": "boolean",
          "default": true,
          "example": false
        },
        "X": {
          "description": "X position of the center of the node.",
          "type": "number",
          "format": "double",
          "example": 10.5
        },
        "Y": {
          "description": "Y position of the center of the node.",
          "type": "number",
          "format": "double",
          "example": 20.5
        }
      },
      "additionalProperties": true,
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 140
    },
    "NumberInputNode": {
      "description": "A `Node` that provides a number input value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "InputValue"
          ],
          "properties": {
            "InputValue": {
              "description": "The value of the input when the `Graph` was published.",
              "type": "number",
              "example": 42
            },
            "MaximumValue": {
              "description": "Maximum value of the node.",
              "type": "number",
              "x-nullable": true,
              "example": 100
            },
            "MinimumValue": {
              "description": "Minimum value of the node.",
              "type": "number",
              "x-nullable": true,
              "example": 0
            },
            "NumberType": {
              "description": "Whether to allow any value to be entered, or only integer values.",
              "type": "string",
              "default": "Double",
              "enum": [
                "Double",
                "Integer"
              ],
              "example": "Integer"
            },
            "StepValue": {
              "description": "Step size for the node value.",
              "type": "number",
              "x-nullable": true,
              "example": 2
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Inputs",
        "Replication"
      ],
      "x-ads-docs-weight": 70
    },
    "OutputData": {
      "description": "An output from the `Graph`.",
      "type": "object",
      "required": [
        "Id",
        "InitialValue",
        "Name",
        "Type"
      ],
      "properties": {
        "Description": {
          "description": "Description displayed to the user.",
          "type": "string",
          "example": "Visualize the output of node."
        },
        "Id": {
          "description": "Unique identifier for the output",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "IntegerOutputNode1"
        },
        "InitialValue": {
          "description": "The value of the output when the `Graph` was created.",
          "type": "string",
          "format": "Based on the type property",
          "example": "10"
        },
        "Name": {
          "description": "Name displayed to the user.",
          "type": "string",
          "example": "FloatValue"
        },
        "Type": {
          "description": "Type of the output",
          "type": "string",
          "enum": [
            "integer",
            "float",
            "boolean",
            "string",
            "unknown"
          ],
          "example": "float"
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 50
    },
    "OutputNode": {
      "description": "An output from a nested `Graph`.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "Symbol"
          ],
          "properties": {
            "Symbol": {
              "description": "The expected type of the output.",
              "type": "string",
              "example": "var[]..[]"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Outputs",
        "Replication"
      ],
      "x-ads-docs-weight": 87
    },
    "Parameter": {
      "description": "Parameter of `InputNode`.",
      "type": "object",
      "properties": {
        "DefaultValue": {
          "description": "The default value if the parameter is not provided.",
          "type": "string",
          "example": "10"
        },
        "Name": {
          "description": "The name of the parameter.",
          "type": "string",
          "example": "x"
        },
        "TypeName": {
          "description": "The name of the parameter type.",
          "type": "string",
          "example": "int"
        },
        "TypeRank": {
          "description": "The rank of the parameter type.",
          "type": "integer",
          "example": -1
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 86
    },
    "Port": {
      "description": "Accepts input to or provides output from a `Node`.",
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Description": {
          "description": "The description of the `Port`.",
          "type": "string",
          "example": "The first part of the list"
        },
        "Id": {
          "description": "The Id of the `Port`. This must be unique within the graph.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "port1"
        },
        "KeepListStructure": {
          "description": "Whether data from this node will be re-aligned into the original structure of the nested list.",
          "type": "boolean",
          "example": true
        },
        "Level": {
          "description": "The Level at which objects will be extracted from a nested list. The deepest level of a nested list is -1.",
          "type": "integer",
          "example": 2
        },
        "Name": {
          "description": "The display name of the `Port`, required for input ports in a `CodeBlockNode` as it is used as the variable name.",
          "type": "string",
          "example": "first"
        },
        "UseLevels": {
          "description": "Whether this `Port` will extract data from a specific level in a nested list.",
          "type": "boolean",
          "example": true
        },
        "UsingDefaultValue": {
          "description": "When set to `false` on an unconnected `Port` of a `FunctionNode`, any default value on the corresponding parameter in the called function is ignored when determining whether or not a node results in a function call or a partial function application.  This property has no effect on other `Node` types, when the `Port` is connected, or the corresponding parameter doesn't have a default value.",
          "type": "boolean",
          "default": true,
          "example": true
        }
      },
      "x-ads-docs-category": "graph",
      "x-ads-docs-examples": {
        "Input": {
          "Description": "The node input value.",
          "Id": "e212f8",
          "KeepListStructure": true,
          "Level": 2,
          "Name": "in",
          "UseLevels": true,
          "UsingDefaultValue": true
        },
        "Output": {
          "Description": "The node output value.",
          "Id": "e212e7",
          "Name": "out"
        }
      },
      "x-ads-docs-weight": 100
    },
    "PythonScriptNode": {
      "description": "A `Node` containing Python code to be executed.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "Code"
          ],
          "properties": {
            "Code": {
              "description": "Python code executed by the `Node`.",
              "type": "string",
              "example": "ok"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 90
    },
    "RawGeometry": {
      "description": "Graphics data for all the geometry created by a particular node.",
      "type": "object",
      "required": [
        "Id",
        "GeometryEntries"
      ],
      "properties": {
        "GeometryEntries": {
          "description": "Array of geometry objects for the node.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RawGeometryEntry"
          }
        },
        "Id": {
          "description": "Id of the geometry node.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "example": "15afcc64bb82424bac1ee50787212e56"
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 370
    },
    "RawGeometryEntry": {
      "description": "Graphics data for one piece of geometry created by a particular node.",
      "type": "object",
      "properties": {
        "Colors": {
          "description": "Base-64 encoded array of 32 bit unsigned integers in RGBA format, definining a texture to apply to the triangles.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true
        },
        "ColorsStride": {
          "description": "Number of values per row in the `Colors` array",
          "type": "integer",
          "x-ads-docs-no-example": true
        },
        "LineColors": {
          "description": "Base-64 encoded array of 32 bit unsigned integers, 1 per vertex, in RGBA format.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true
        },
        "LineStripColors": {
          "description": "Base-64 encoded array of 32 bit unsigned integers, 1 per vertex, in RGBA format.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true
        },
        "LineStripCounts": {
          "description": "Base-64 encoded array of 32 bit unsigned integers, 1 per line strip, giving the number of vertices in the strip.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true
        },
        "LineStripVertices": {
          "description": "Base-64 encoded array of 32 bit floats, 3 per vertex.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true
        },
        "LineVertices": {
          "description": "Base-64 encoded array of 32 bit floats, 3 per vertex.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true
        },
        "PointVertexColors": {
          "description": "Base-64 encoded array of 32 bit unsigned integers, 1 per vertex, in RGBA format.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true
        },
        "PointVertices": {
          "description": "Base-64 encoded array of 32 bit floats, 3 per vertex.",
          "type": "string",
          "format": "byte",
          "x-ads-docs-no-example": true
        },
        "RequiresPerVertexColoration": {
          "description": "Whether or not the individual vertices should be colored using the data in the corresponding arrays.",
          "type": "boolean",
          "x-ads-docs-no-example": true
        },
        "TriangleNormals": {
          "description": "Base-64 encoded array of 32 bit floats, 3 per vertex.",
          "type": "string",
          "format": "byte",
          "example": "AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAAAAAAAAAAIA/AAAAgAAAAIAAAIC/AAAAgAAAAIAAAIC/AAAAgAAAAIAAAIC/AAAAgAAAAIAAAIC/AAAAgAAAAIAAAIC/AAAAgAAAAIAAAIC/AAAAgAAAgL8AAAAAAAAAgAAAgL8AAAAAAAAAgAAAgL8AAAAAAAAAgAAAgL8AAAAAAAAAgAAAgL8AAAAAAAAAgAAAgL8AAAAAAACAvwAAAIAAAACAAACAvwAAAIAAAACAAACAvwAAAIAAAACAAACAvwAAAIAAAACAAACAvwAAAIAAAACAAACAvwAAAIAAAACAAAAAgAAAgD8AAACAAAAAgAAAgD8AAACAAAAAgAAAgD8AAACAAAAAgAAAgD8AAACAAAAAgAAAgD8AAACAAAAAgAAAgD8AAACAAACAPwAAAIAAAACAAACAPwAAAIAAAACAAACAPwAAAIAAAACAAACAPwAAAIAAAACAAACAPwAAAIAAAACAAACAPwAAAIAAAACA"
        },
        "TriangleTextureCoordinates": {
          "description": "Base-64 encoded array of 32 bit floats, 2 per vertex.",
          "type": "string",
          "format": "byte",
          "example": "AACAPwAAgD8AAAAAAACAPwAAgD8AAAAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAAAAAAAAAAAAAAAAAIA/AACAPwAAAAAAAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AACAPwAAgD8AAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAAAAAAAAAAAAAAAAAIA/"
        },
        "TriangleVertexColors": {
          "description": "Base-64 encoded array of 32 bit unsigned integers, 1 per vertex, in RGBA format.",
          "type": "string",
          "format": "byte",
          "example": "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"
        },
        "TriangleVertices": {
          "description": "Base-64 encoded array of 32 bit floats, 3 per vertex.",
          "type": "string",
          "format": "byte",
          "example": "AAAAPwAAAD8AAAA/AAAAvwAAAD8AAAA/AAAAPwAAAL8AAAA/AAAAPwAAAL8AAAA/AAAAvwAAAD8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAL8AAAC/AAAAvwAAAL8AAAC/AAAAPwAAAD8AAAC/AAAAPwAAAD8AAAC/AAAAvwAAAL8AAAC/AAAAvwAAAD8AAAC/AAAAvwAAAL8AAAA/AAAAvwAAAL8AAAC/AAAAPwAAAL8AAAA/AAAAPwAAAL8AAAA/AAAAvwAAAL8AAAC/AAAAPwAAAL8AAAC/AAAAvwAAAD8AAAA/AAAAvwAAAD8AAAC/AAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAvwAAAD8AAAC/AAAAvwAAAL8AAAC/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAC/AAAAvwAAAD8AAAA/AAAAvwAAAD8AAAA/AAAAPwAAAD8AAAC/AAAAvwAAAD8AAAC/AAAAPwAAAL8AAAA/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAC/"
        }
      },
      "x-ads-docs-category": "execute",
      "x-ads-docs-weight": 380
    },
    "SourceMapEntry": {
      "description": "Contains the `Node` ID and line number within the `Node` for a DesignScript line.",
      "required": [
        "Node"
      ],
      "properties": {
        "LineNumber": {
          "description": "The line number within the node, 1 if not specified.",
          "type": "integer",
          "example": 1
        },
        "Node": {
          "description": "The Id of the node.",
          "type": "string",
          "example": "15afcc64bb82424bac1ee50787212e56"
        }
      },
      "x-ads-docs-category": "codegen",
      "x-ads-docs-weight": 430
    },
    "StringInputNode": {
      "description": "A `Node` that provides a string input value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "InputValue"
          ],
          "properties": {
            "InputValue": {
              "description": "The value of the input when the `Graph` was published.",
              "type": "string",
              "example": "value"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Inputs",
        "Replication"
      ],
      "x-ads-docs-weight": 70
    },
    "StringOutputNode": {
      "description": "A `Node` that provides a string output value.",
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "required": [
            "OutputValue"
          ],
          "properties": {
            "OutputValue": {
              "description": "The value of the output when the `Graph` was created.",
              "type": "string",
              "example": "output"
            }
          }
        }
      ],
      "x-ads-docs-category": "graph",
      "x-ads-docs-example-ignore": [
        "Outputs",
        "Replication"
      ],
      "x-ads-docs-weight": 80
    },
    "View": {
      "description": "Information in the `Graph` related strictly to displaying the graph and not related to the execution.  Can be safely left out of any execution call.  Not included when just requesting metadata.",
      "type": "object",
      "properties": {
        "Annotations": {
          "description": "Array of `Annotation`s stored in the `View`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Annotation"
          },
          "x-omitempty": true
        },
        "Camera": {
          "$ref": "#/definitions/Camera"
        },
        "NodeViews": {
          "description": "Information about the `Node`s related strictly to displaying the graph.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeView"
          },
          "x-omitempty": true
        },
        "X": {
          "description": "X position of the center point of the camera viewing the graph when it was last saved.",
          "type": "number",
          "format": "double",
          "example": 1.1
        },
        "Y": {
          "description": "Y position of the center point of the camera viewing the graph when it was last saved.",
          "type": "number",
          "format": "double",
          "example": 2.2
        },
        "Zoom": {
          "description": "Zoom scale of the camera viewing the graph when it was last saved.",
          "type": "number",
          "format": "double",
          "default": 1,
          "example": 0.5
        }
      },
      "additionalProperties": true,
      "x-ads-docs-category": "graph",
      "x-ads-docs-weight": 130
    }
  },
  "parameters": {
    "backend": {
      "type": "string",
      "x-ads-docs-skip": true,
      "description": "Override the backend in use. For internal use only.",
      "name": "backend",
      "in": "query"
    },
    "header_x_user_id": {
      "type": "string",
      "x-ads-docs-skip": true,
      "description": "In a two-legged authentication context, the app has access to all users specified by the administrator in the SaaS integrations UI. By providing this header, the API call will be limited to act on behalf of only the user specified.",
      "name": "x-user-id",
      "in": "header"
    },
    "longTimeout": {
      "type": "boolean",
      "default": false,
      "x-ads-docs-skip": true,
      "description": "For Immediate mode execution, use the longer TS timeout rather than the Apigee timeout.",
      "name": "longTimeout",
      "in": "query",
      "allowEmptyValue": true
    }
  },
  "securityDefinitions": {
    "access_code": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "/authentication/v1/authorize",
      "tokenUrl": "/authentication/v1/gettoken",
      "scopes": {
        "bucket:read": "",
        "data:create": "",
        "data:read": "",
        "data:search": "",
        "data:write": ""
      },
      "x-ads-authentication-context": "user context optional"
    }
  },
  "x-ads-apiproxy": {
    "advanced": {
      "connect-timeout": 5000,
      "enable-metering": false,
      "enable-region-redirect": false,
      "framework-version": "master",
      "idle-timeout": 10000,
      "keep-alive-timeout": 60000,
      "no-backend": false,
      "request-streaming": true,
      "response-streaming": true,
      "streaming": true
    },
    "api_proxy": "computation-graph",
    "common": {
      "proxy": {
        "postflow": [],
        "preflow": []
      },
      "target": {
        "postflow": [],
        "preflow": []
      }
    },
    "name": "Computation Graph Service (CoGS)",
    "target_base_path": "/computation-graph/v1",
    "targets": {
      "dev": {
        "default-server": "https://dev-cogs.thunderstorm.autodesk.com"
      },
      "prd": {
        "default-server": "https://cogs.thunderstorm.autodesk.com"
      },
      "stg": {
        "default-server": "https://stage-cogs.thunderstorm.autodesk.com"
      }
    }
  },
  "x-ads-service": {
    "core-entity-version": "1.0.0",
    "host-version": "1.0.0",
    "security-definition-version": "1.0.0"
  }
}