//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.64.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace Hypar.Elements
{
    #pragma warning disable // Disable all warnings

    /// <summary>An identifiable object.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.64.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Identifiable : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Identifiable FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Identifiable>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>An RGB material using the PBR model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.64.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Material : Identifiable, System.ComponentModel.INotifyPropertyChanged
    {
        private double _red;
        private double _green;
        private double _blue;
        private double _alpha;
        private double _glossinessFactor;
        private double _specularFactor;
    
        /// <summary>The red component of the color.</summary>
        [Newtonsoft.Json.JsonProperty("red", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double Red
        {
            get { return _red; }
            set 
            {
                if (_red != value)
                {
                    _red = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The green component of the color.</summary>
        [Newtonsoft.Json.JsonProperty("green", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double Green
        {
            get { return _green; }
            set 
            {
                if (_green != value)
                {
                    _green = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The blue component of the color.</summary>
        [Newtonsoft.Json.JsonProperty("blue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double Blue
        {
            get { return _blue; }
            set 
            {
                if (_blue != value)
                {
                    _blue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The alpha component (transparency) of the color.</summary>
        [Newtonsoft.Json.JsonProperty("alpha", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double Alpha
        {
            get { return _alpha; }
            set 
            {
                if (_alpha != value)
                {
                    _alpha = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The glossiness factor.</summary>
        [Newtonsoft.Json.JsonProperty("glossinessFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double GlossinessFactor
        {
            get { return _glossinessFactor; }
            set 
            {
                if (_glossinessFactor != value)
                {
                    _glossinessFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The specular factor.</summary>
        [Newtonsoft.Json.JsonProperty("specularFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double SpecularFactor
        {
            get { return _specularFactor; }
            set 
            {
                if (_specularFactor != value)
                {
                    _specularFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Material FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Material>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>The base element.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.64.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Element : Identifiable, System.ComponentModel.INotifyPropertyChanged
    {
        private Material _material = new Material();
    
        [Newtonsoft.Json.JsonProperty("material", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Material Material
        {
            get { return _material; }
            set 
            {
                if (_material != value)
                {
                    _material = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Element FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Element>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
}